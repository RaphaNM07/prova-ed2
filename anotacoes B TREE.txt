Anotações Árvores B

Árvores B são arvores que os nós podem conter mais de 1 valor e mais de 2 filhos.

The need for B-tree arose with the rise in the need for lesser time in accessing the physical storage media like a hard disk. The secondary storage devices are slower with a larger capacity. There was a need for such types of data structures that minimize the disk accesses.

B-tree can store many keys in a single node and can have multiple child nodes. This decreases the height significantly allowing faster disk accesses.

B Tree Applications

- large databases and file systems
- to store blocks of data (secondary storage media)
- multilevel indexing


Properties of B-Tree: 

- All leaves are at the same level.

- B-Tree is defined by the term minimum degree ‘t‘. The value of ‘t‘ depends upon disk block size.

- Every node except the root must contain at least t-1 keys. The root may contain a minimum of 1 key.

- All nodes (including root) may contain at most (2*t – 1) keys.

- Number of children of a node is equal to the number of keys in it + 1.

- All keys of a node are sorted in increasing order. The child between two keys k1 and k2 contains all keys in the range from k1 and k2.

- B-Tree grows and shrinks from the root which is unlike Binary Search Tree. Binary Search Trees grow downward and also shrink from 
downward.

- Like other balanced Binary Search Trees, the time complexity to search, insert and delete is O(log n).

- Insertion of a Node in B-Tree happens only at Leaf Node.

Advantages of B-Trees:

- B-Trees have a guaranteed time complexity of O(log n) for basic operations like insertion, deletion, and searching, which makes them suitable for large data sets and real-time applications.
- B-Trees are self-balancing.
- High-concurrency and high-throughput.
- Efficient storage utilization.

Disadvantages of B-Trees:

- B-Trees are based on disk-based data structures and can have a high disk usage.
- Not the best for all cases.
- Slow in comparison to other data structures.




Searching Complexity on B Tree

Worst case Time complexity:  Θ(log n)

Average case Time complexity:  Θ(log n)

Best case Time complexity:  Θ(log n)

Average case Space complexity:  Θ(n)

Worst case Space complexity:  Θ(n)









