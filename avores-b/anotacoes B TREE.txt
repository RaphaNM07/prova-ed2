Anotações Árvores B

Árvores B são arvores que os nós podem conter mais de 1 valor e mais de 2 filhos.

The need for B-tree arose with the rise in the need for lesser time in accessing the physical storage media like a hard disk. The secondary storage devices are slower with a larger capacity. There was a need for such types of data structures that minimize the disk accesses.

B-tree can store many keys in a single node and can have multiple child nodes. This decreases the height significantly allowing faster disk accesses.

B Tree Applications

- large databases and file systems
- to store blocks of data (secondary storage media)
- multilevel indexing


Properties of B-Tree: 

- All leaves are at the same level.

- B-Tree is defined by the term minimum degree ‘t‘. The value of ‘t‘ depends upon disk block size.

- Every node except the root must contain at least t-1 keys. The root may contain a minimum of 1 key.

- All nodes (including root) may contain at most (2*t – 1) keys.

- Number of children of a node is equal to the number of keys in it + 1.

- All keys of a node are sorted in increasing order. The child between two keys k1 and k2 contains all keys in the range from k1 and k2.

- B-Tree grows and shrinks from the root which is unlike Binary Search Tree. Binary Search Trees grow downward and also shrink from 
downward.

- Like other balanced Binary Search Trees, the time complexity to search, insert and delete is O(log n).

- Insertion of a Node in B-Tree happens only at Leaf Node.

--------------------------------------------------------------------------------------------

Searching Complexity on B Tree

Worst case Time complexity:  Θ(log n)

Average case Time complexity:  Θ(log n)

Best case Time complexity:  Θ(log n)

Average case Space complexity:  Θ(n)

Worst case Space complexity:  Θ(n)

---------------------------------------------------------------------------------------------

Inserting:

	Insertions are done at the leaf node level. The following algorithm needs to be followed in order to insert an item into B Tree.

	1 - Traverse the B Tree in order to find the appropriate leaf node at which the node can be inserted.
	
	2 - If the leaf node contain less than m-1 keys then insert the element in the increasing order.
	
	3 - Else, if the leaf node contains m-1 keys, then follow the following steps.
		
		- Insert the new element in the increasing order of elements.
		
		- Split the node into the two nodes at the median.
		
		- Push the median element upto its parent node.
		
		- If the parent node also contain m-1 number of keys, then split it too by following the same steps.


Deletion:

	Deletion is also performed at the leaf nodes. The node which is to be deleted can either be a leaf node or an internal node. Following algorithm needs to be followed in order to delete a node from a B tree.

	1 - Locate the leaf node.
	
	2 - If there are more than m/2 keys in the leaf node then delete the desired key from the node.
	
	3 - If the leaf node doesn't contain m/2 keys then complete the keys by taking the element from right or left sibling.
		
		- If the left sibling contains more than m/2 elements then push its largest element up to its parent and move the intervening element down to the node 		where the key is deleted.

		- If the right sibling contains more than m/2 elements then push its smallest element up to the parent and move intervening element down to the node 		where the key is deleted.

	4 - If neither of the sibling contain more than m/2 elements then create a new leaf node by joining two leaf nodes and the intervening element of the parent 	node.

	5 - If parent is left with less than m/2 nodes then, apply the above process on the parent too.

	If the the node which is to be deleted is an internal node, then replace the node with its in-order successor or predecessor. Since, successor or predecessor will always be on the leaf node hence, the process will be similar as the node is being deleted from the leaf node.

---------------------------------------------------------------------------------------------







