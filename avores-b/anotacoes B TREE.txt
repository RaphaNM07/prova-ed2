
Anotações Árvores B

	Árvores B são árvores que os nós podem conter mais de 1 valor e mais de 2 filhos.

	A necessidade de B-tree surgiu com o aumento da necessidade de menor tempo para acessar a mídia de armazenamento físico como um disco rígido. Os dispositivos de armazenamento secundário são mais lentos com uma capacidade maior. Tinha necessidade de tais tipos de estruturas de dados que minimizassem os tempos de acesso ao disco.

	A árvore B pode armazenar muitas chaves em um único nó e pode ter vários nós filhos. Isso diminui significativamente a altura, permitindo acessos mais rápidos ao disco.

	Aplicações da Árvore B

	- grandes bancos de dados e sistemas de arquivos
	- para armazenar blocos de dados (mídia de armazenamento secundário)
	- indexação multinível


Propriedades da Árvore B:

	- Todas as folhas estão no mesmo nível.

	- B-Tree é definido pelo termo grau mínimo 't'. O valor de 't' depende do tamanho do bloco do disco.

	- Cada nó, exceto a raiz, deve conter pelo menos t-1 chaves. A raiz pode conter no mínimo 1 chave.

	- Todos os nós (incluindo root) podem conter no máximo (2*t – 1) chaves.

	- O número de filhos de um nó é igual ao número de chaves nele + 1.

	- Todas as chaves de um nó são classificadas em ordem crescente. O filho entre duas chaves k1 e k2 contém todas as chaves no intervalo de k1 e k2.

	- A B-Tree cresce e diminui a partir da raiz, diferente da Árvore de Pesquisa Binária. Árvores de busca binária crescem para baixo e também encolhem de
para baixo.

	- Como outras Árvores Binárias de Pesquisa balanceadas, a complexidade de tempo para pesquisar, inserir e excluir é O(log n).

	- A inserção de um nó na B-Tree ocorre apenas no nó folha.



	Complexidade de busca na Árvore B Θ(log n)

-------------------------------------------------- -------------------------------------------

	Inserção:

	As inserções são feitas no nível do nó folha. O seguinte algoritmo precisa ser seguido para inserir um item na B Tree.

	1 - Percorrer a Árvore para encontrar o nó folha no qual o nó pode ser inserido.

	2 - Se o nó folha contiver menos que m-1 chaves, insira o elemento em ordem crescente.

	3 - Caso contrário, se o nó folha contiver chaves m-1, siga as etapas a seguir.

		- Insira o novo elemento na ordem crescente dos elementos.

		- Divida o nó em dois nós na mediana.

		- Empurre o elemento mediano até seu nó pai.

		- Se o nó pai também contiver m-1 número de chaves, divida-o também seguindo as mesmas etapas.


	Deleção:

	A exclusão também é realizada nos nós folha. O nó a ser excluído pode ser um nó folha ou um nó interno. O algoritmo a seguir precisa ser seguido para excluir um nó de uma árvore B.

	1 - Localize o nó folha.

	2 - Se houver mais de m/2 chaves no nó folha, exclua a chave desejada do nó.

	3 - Se o nó folha não contiver m/2 chaves então complete as chaves tomando o elemento do irmão direito ou esquerdo.

		- Se o irmão esquerdo contiver mais de m/2 elementos, empurre seu maior elemento até seu pai e mova o elemento intermediário para baixo, para o nó onde a chave foi excluída.

		- Se o irmão direito contiver mais de m/2 elementos, empurre seu menor elemento para o pai e mova o elemento intermediário para baixo, para o nó onde a chave foi excluída.

	4 - Se nenhum dos irmãos contiver mais de m/2 elementos, crie um novo nó folha unindo dois nós folha e o elemento intermediário do nó pai.

	5 - Se o pai ficar com menos de m/2 nós, aplique o processo acima no pai também.

	Se o nó que deve ser excluído for um nó interno, substitua o nó por seu sucessor ou predecessor na ordem. Como o sucessor ou predecessor sempre estará no nó folha, portanto, o processo será semelhante, pois o nó está sendo excluído do nó folha.


--------------------------------------------------------------------







